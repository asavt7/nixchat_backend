// Code generated by MockGen. DO NOT EDIT.
// Source: ./hub.go

// Package mock_chathub is a generated GoMock package.
package mock_chathub

import (
	reflect "reflect"

	chathub "github.com/asavt7/nixchat_backend/internal/handlers/chathub"
	gomock "github.com/golang/mock/gomock"
)

// MockClientConnectionsHub is a mock of ClientConnectionsHub interface.
type MockClientConnectionsHub struct {
	ctrl     *gomock.Controller
	recorder *MockClientConnectionsHubMockRecorder
}

// MockClientConnectionsHubMockRecorder is the mock recorder for MockClientConnectionsHub.
type MockClientConnectionsHubMockRecorder struct {
	mock *MockClientConnectionsHub
}

// NewMockClientConnectionsHub creates a new mock instance.
func NewMockClientConnectionsHub(ctrl *gomock.Controller) *MockClientConnectionsHub {
	mock := &MockClientConnectionsHub{ctrl: ctrl}
	mock.recorder = &MockClientConnectionsHubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientConnectionsHub) EXPECT() *MockClientConnectionsHubMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockClientConnectionsHub) Register(client *chathub.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", client)
}

// Register indicates an expected call of Register.
func (mr *MockClientConnectionsHubMockRecorder) Register(client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockClientConnectionsHub)(nil).Register), client)
}

// SendFromClientMessage mocks base method.
func (m *MockClientConnectionsHub) SendFromClientMessage(mes string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendFromClientMessage", mes)
}

// SendFromClientMessage indicates an expected call of SendFromClientMessage.
func (mr *MockClientConnectionsHubMockRecorder) SendFromClientMessage(mes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendFromClientMessage", reflect.TypeOf((*MockClientConnectionsHub)(nil).SendFromClientMessage), mes)
}

// Unregister mocks base method.
func (m *MockClientConnectionsHub) Unregister(client *chathub.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unregister", client)
}

// Unregister indicates an expected call of Unregister.
func (mr *MockClientConnectionsHubMockRecorder) Unregister(client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unregister", reflect.TypeOf((*MockClientConnectionsHub)(nil).Unregister), client)
}

// MockClientConnectionsRegister is a mock of ClientConnectionsRegister interface.
type MockClientConnectionsRegister struct {
	ctrl     *gomock.Controller
	recorder *MockClientConnectionsRegisterMockRecorder
}

// MockClientConnectionsRegisterMockRecorder is the mock recorder for MockClientConnectionsRegister.
type MockClientConnectionsRegisterMockRecorder struct {
	mock *MockClientConnectionsRegister
}

// NewMockClientConnectionsRegister creates a new mock instance.
func NewMockClientConnectionsRegister(ctrl *gomock.Controller) *MockClientConnectionsRegister {
	mock := &MockClientConnectionsRegister{ctrl: ctrl}
	mock.recorder = &MockClientConnectionsRegisterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientConnectionsRegister) EXPECT() *MockClientConnectionsRegisterMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockClientConnectionsRegister) Register(client *chathub.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", client)
}

// Register indicates an expected call of Register.
func (mr *MockClientConnectionsRegisterMockRecorder) Register(client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockClientConnectionsRegister)(nil).Register), client)
}

// Unregister mocks base method.
func (m *MockClientConnectionsRegister) Unregister(client *chathub.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unregister", client)
}

// Unregister indicates an expected call of Unregister.
func (mr *MockClientConnectionsRegisterMockRecorder) Unregister(client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unregister", reflect.TypeOf((*MockClientConnectionsRegister)(nil).Unregister), client)
}

// MockClientConnectionsMessageProcessor is a mock of ClientConnectionsMessageProcessor interface.
type MockClientConnectionsMessageProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockClientConnectionsMessageProcessorMockRecorder
}

// MockClientConnectionsMessageProcessorMockRecorder is the mock recorder for MockClientConnectionsMessageProcessor.
type MockClientConnectionsMessageProcessorMockRecorder struct {
	mock *MockClientConnectionsMessageProcessor
}

// NewMockClientConnectionsMessageProcessor creates a new mock instance.
func NewMockClientConnectionsMessageProcessor(ctrl *gomock.Controller) *MockClientConnectionsMessageProcessor {
	mock := &MockClientConnectionsMessageProcessor{ctrl: ctrl}
	mock.recorder = &MockClientConnectionsMessageProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientConnectionsMessageProcessor) EXPECT() *MockClientConnectionsMessageProcessorMockRecorder {
	return m.recorder
}

// SendFromClientMessage mocks base method.
func (m *MockClientConnectionsMessageProcessor) SendFromClientMessage(mes string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendFromClientMessage", mes)
}

// SendFromClientMessage indicates an expected call of SendFromClientMessage.
func (mr *MockClientConnectionsMessageProcessorMockRecorder) SendFromClientMessage(mes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendFromClientMessage", reflect.TypeOf((*MockClientConnectionsMessageProcessor)(nil).SendFromClientMessage), mes)
}
